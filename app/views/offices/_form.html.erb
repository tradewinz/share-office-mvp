<script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false&libraries=geometry,places&key=AIzaSyA63spoPlwAL-NcXhJaU7bOvJyZL2PuKQE">
</script>

    <div id="first">
      <div class="listing-header">What's the address?</div> 
        <div class="row panel panel-border">       
          <fieldset class="padtop_big padbottom_big side-margins">
            <%= form_tag(new_office_path, :method => "get", :id => "address_form" ) do %>
            <div class="control-group">                              
              <%= text_field_tag 'address', '', :style => "height:40px; font-size:20px; padding-left: 15px; width:716px;", :placeholder => "2000 Coast Ave, Mountain View, CA 94043", id: "address_field"%>
            </div>
            <div class="hide" id="error-msg">Please enter a valid address.</div>
            
            <div class="hide">
                <%= text_field_tag :street %>
                <%= text_field_tag :city %>
                <%= text_field_tag :state %>
                <%=text_field_tag :zip %>
            </div>
            
            <%= submit_tag "Continue", :class => "btn btn-large btn-primary pull-right", :id => "continueBtn", :style => "width: 150px", onclick:"return validate();" %>

            <% end %>
          </fieldset>
        </div>
      </div>

<!-- other JS code -->
<script type="text/javascript">
    function validate() {   
        mixpanel.track("Clicked Continue"); 
        if (city.value == '' || street.value == '' ) {
            $("#address_field").addClass('error-border');
            $("#error-msg").show();
            return false;
        }
        $("#error-msg").hide();
        $("#address_field").removeClass('error-border');
        return true;
    }
    
    $(document).ready (function() {
        var input = document.getElementById('address_field');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.setTypes(['geocode']);
        autocomplete.setComponentRestrictions({'country':'us'});
        iePlaceholderFix();

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            var place = autocomplete.getPlace();
            var address = '';
            if (place.address_components) {
                var street = document.getElementById('street');
                var city = document.getElementById('city');
                var state = document.getElementById('state');
                var zip = document.getElementById('zip');

                // reset fields
                street.value = '';
                city.value = '';
                state.value = '';
                zip.value = '';


                //street.value = place.address_components[0] && place.address_components[0].short_name || '';
                //city.value = place.address_components[1] && place.address_components[1].short_name || '';
                //state.value = place.address_components[2] && place.address_components[2].short_name || '';
                var street_number;
                var street_name;

                for (var i=0; i<place.address_components.length;i++)
                {
                    for (var j=0;j<place.address_components[i].types.length;j++)
                    {
                        //console.log('type:' + place.address_components[i].types[j] + ' => short_name:' + place.address_components[i].short_name + ' , long_name:' + place.address_components[i].long_name);
                        if (place.address_components[i].types[j] == "postal_code")
                        {
                            zip.value = place.address_components[i].long_name;
                        }
                        else if (place.address_components[i].types[j] == "street_number")
                        {
                            street_number = place.address_components[i].long_name;
                        }
                        else if (place.address_components[i].types[j] == "route")
                        {
                            street_name = place.address_components[i].long_name;
                        }
                        else if (place.address_components[i].types[j] == "locality")
                        {
                            city.value = place.address_components[i].long_name;
                        }
                        else if (place.address_components[i].types[j] == "administrative_area_level_1")
                        {
                            state.value = place.address_components[i].short_name;
                        }
                    }
                }
                if (street_number && street_name) {
                    street.value = street_number + ' ' + street_name;
                } else if (street_name) {
                    street.value = street_name;
                } else {
                    street.value = '';
                }
            }

            if (city.value == '' || street.value == '' ) {
                $("#address_field").addClass('error-border');
                $("#address_field").css('border', 'solid red 2px');
                $("#error-msg").show();
            } else {
                $("#address_field").removeClass('error-border');
                $("#error-msg").hide();
            }


            console.log(input.value);
            console.log(street.value);
            console.log(city.value);
            console.log(state.value);
            console.log(zip.value);
        });
        // // get latitude and longitude
        //   geocoder.geocode( { 'address': place}, function(results, status) {
        //     if (status == google.maps.GeocoderStatus.OK) {
        //       map.setCenter(results[0].geometry.location);
        //       var marker = new google.maps.Marker({
        //           map: map,
        //           position: results[0].geometry.location
        //       });
        //     } else {
        //       alert('Geocode was not successful for the following reason: ' + status);
        //     }
        //   });


    });



</script>
